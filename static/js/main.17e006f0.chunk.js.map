{"version":3,"sources":["logo.svg","components/BarContainer.js","components/DisplayArea.js","images/xbutton.svg","components/Entry.js","components/Reflections.js","App.js","reportWebVitals.js","index.js"],"names":["BarContainer","props","barContainerStyle","width","total","barStyle","height","num","backgroundColor","color","className","style","DisplayArea","totalBars","array","map","value","Entry","date","text","Reflections","logArray","push","src","xbutton","onClick","click","visibility","i","App","swapped","defaultBarCount","defaultDelay","aniSpeedConstants","useState","input","setInput","delayInc","setDelayInc","sortArray","setSortArray","displayAreaStyle","setDisplayAreaStyle","reflectionsStyle","setReflectionsStyle","animating","setAnimating","tempArray","delay","inputChange","e","target","id","bubbleAnimate","idx","animateArray","pass","setTimeout","temp","loadArray","index","length","quickSort","arr","leftIdx","rightIdx","sorted","pivotIdx","console","log","pivotVal","l","r","quickSortAnimate","quickSortSwap","quickSortPartition","j","type","indexOf","insertionSortAnimate","current","useEffect","ReactDOM","render","document","getElementById","min","max","defaultValue","onChange","Math","floor","random","compareIdx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.17e006f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const BarContainer = (props) => {\r\n\r\n    const barContainerStyle = {\r\n        width: `${100/props.total}%`\r\n        // width: `10%`\r\n    }\r\n\r\n    const barStyle = {\r\n        height: `${props.num}%`,\r\n        backgroundColor: props.color\r\n    }\r\n    \r\n    return (\r\n        <div className=\"barContainer\" style={barContainerStyle}>\r\n            <div className=\"bar\" style={barStyle}></div> {/*bar*/}\r\n\r\n            {/* <h2 className=\"barLabel\">{props.num}</h2> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarContainer","import '../App.css';\r\nimport BarContainer from './BarContainer.js'\r\n\r\nconst DisplayArea = (props) => {\r\n\r\n    let totalBars = props.total\r\n\r\n    return (\r\n        <div className=\"graphContainer\">\r\n            {props.array.map(num => {\r\n                return <BarContainer num={num.value} total={totalBars} color={num.color}/>\r\n            })\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DisplayArea","export default __webpack_public_path__ + \"static/media/xbutton.f939aa43.svg\";","const Entry = (props) => {\r\n    return(\r\n        <div className=\"card entry-card\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title is-centered\">\r\n                    {props.date}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n                {props.text}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Entry","import xbutton from '../images/xbutton.svg'\r\nimport Entry from './Entry.js'\r\n\r\nconst Reflections = (props) => {\r\n\r\n    let logArray = []\r\n    logArray.push(\r\n        {\r\n            date: \"2021/02/26\",\r\n            text: \"Learnt how to use useState hook thing to save state variables (saving user input) using props in components, in this case passing the array through to display in the display area component\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021//02/27\",\r\n            text: \"Finding out random things about file structure and imports (CSS files and stuff), State (context of constantly changing array while being sorted) is confusing, need to understand it. Dealt with array not updating even though it was being sorted correctly\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/02/28\",\r\n            text: \"Learnt that javascript arrays are just references and in order to actually clone an array, have to use [...xyz]\\nManaged to get sorter working but have to clarify why i had to use [...] syntax for a specific case\\nNow that bubble sort is a success, will look at refining current solution before adding more sort methods.\\nChanging functionality so that instead of sort button generating and sorting at the same time, split it up so that there's a button to generate an array based on user input, and a separate sort button\\nDoing random aesthetic stuff with css here and there\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/02\",\r\n            text: \"Random playing around with a border on the display area, using a variable to determine whether the display area should show the border or not (if array size is 0 then border should not be visible because it shows by default)\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/03\",\r\n            text: \"Running into an issue where button does not seem to update react use states on first click, but only updates on 2nd+ clicks...this is causing the generate array button to fail to render/update the graph unless i click it twice...\\nconsole log is telling me the usestate setter method for sortArray is not actually updating it.\\nResearch tells me that react hooks run asynchronously which would explain why it wasn't immediately updating the array.\\nUsed useffect() to resolve this issue so that react renders the array only after it changes (so wait till sortArray changes before updating)\\nternary operators are sick\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {               \r\n            date: \"2021/03/04\",\r\n            text: \"Created the reflections bit so i can access logs on the app. While creating this, used a hook for visibility of the reflections overlay, which involved passing the hook function as a prop to the Reflections object.\\nLearnt that when doing so, have to use the passed in hook function (props) within arrow function in the onClick instead of calling the props directly from onClick\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/06\",\r\n            text: \"Implementing quicksort algorithm without looking up code for extra challenge, not sure if I should've jumped the gun going from bubble sort to quicksort just like that...\\nQuicksort implemented, now need to animate it\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/08\",\r\n            text: \"figuring out how to animate quicksort, implemented animation changes every time a sort happens but i realised this is not that great since it doesn't represent the recursiveness of quicksort\\nin order for quick sort to make sense, i need to start changing bar colours while animating so that i can see comparisons etc, this would make it useful in general for every sorting algorithm.\\nTo achieve this, modified array from numerical array to array that holds objects, which then contains the numerical value along with a colour value. Means i had to use .map a lot more whenever it was necessary\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/09\",\r\n            text: \"Made a sensible modification to the animation of Bubble Sort to indicate sorted bars as green, budget 'hard-codey' solution but will modify to a better one later on\\nAnimating quicksort was aids, wanted to indicate sorted bars as green so turned the array from a numerical array into an array containing objects with a number and color that was passed through the whole\\nquicksort process but found out that OBJECTS WITHIN ARRAYS ACT AS REFERENCES AND THUS CANNOT BE CLONED IN A SHALLOW COPY.\\nModified to using a separate array to just store sorted bar indexes :( much boring such zzz\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/13\",\r\n            text: \"Learnt how to use useState hook thing to save state variables (saving user input) using props in components, in this case passing the array through to display in the display area component\\nGonna change array size and delay to a user input using sliders\\nQUESTION FOR LATER RESEARCH: input sliders with onchange events which update state values works AFTER you move the sliders, how to make react set state using default values on first render/load?\\nTEMPORARY SOLUTION = set default value for usestate based on a variable, input defaultvalue will also be variable for consistency...\\nStarted off using 2 separate onchange functions for barcount and delay inputs, realised i can use e.target.id and just have one function :O\\nSince for the delay, when the slider is HIGHER we want LESS delay (smaller value when higher value), will use negative values for input and then use absolute value, budget thinking hehe\\nSIOIJOSEJIFJISEFPJSEPF NICE NICE NICE NICE SPEED CONTROLS LITTTTT\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/14\",\r\n            text: \"Bugfix: Found a bug where the array size and delay state variables would cause the array size and delays to be changed mid animation, fixed this by disabling setState functions upon the respective onChange events when an animation was in progress.\\nAnimation is determined to be in progress based on a simple state variable.\"\r\n        }\r\n    )\r\n    logArray.push(\r\n        {\r\n            date: \"2021/03/19\",\r\n            text: \"Started and finished implementing insertion sort\"\r\n        }\r\n    )\r\n\r\n\r\n    return (\r\n        <div className=\"reflectionsContainer\">\r\n            <img className=\"xbutton\" src={xbutton} onClick={()=>{props.click({visibility: \"hidden\"})}}/>    \r\n            {\r\n                logArray.map(i => {\r\n                        return <Entry date={i.date} text={i.text}/>\r\n                    }\r\n                )\r\n            }\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reflections","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SortButton from './components/SortButton.js';\r\nimport DisplayArea from './components/DisplayArea.js';\r\nimport Reflections from './components/Reflections.js';\r\nimport { findAllByDisplayValue } from '@testing-library/react';\r\n\r\n\r\nfunction App() {\r\n\r\n  const defaultBarCount = {default: 100, min: 0, max: 250}\r\n  const defaultDelay = {min: -11, max: -1}\r\n  const aniSpeedConstants = {bubble: -5, quick: -8, insertion: -10}\r\n\r\n\r\n  const [input, setInput] = useState(defaultBarCount.default);\r\n  const [delayInc, setDelayInc] = useState(defaultDelay.max);\r\n  const [sortArray, setSortArray] = useState([]);\r\n  const [displayAreaStyle, setDisplayAreaStyle] = useState ({visibility: \"hidden\"});\r\n  const [reflectionsStyle, setReflectionsStyle] = useState ({visibility: \"hidden\"});\r\n  const [animating, setAnimating] = useState(false);\r\n  let tempArray = [];\r\n  let swapped;\r\n\r\n  let delay = 0;\r\n\r\n  useEffect(() => {\r\n\r\n    console.log(input);\r\n    ReactDOM.render(<DisplayArea array={sortArray} total={input}/>, document.getElementById('displayArea'))\r\n  }, [sortArray])\r\n\r\n  function inputChange(e) {\r\n\r\n    if(!animating) {\r\n      switch(e.target.id) {\r\n        case \"barCountInput\": setInput(e.target.value);\r\n        break;\r\n        case \"delayInput\": setDelayInc(e.target.value);\r\n        break;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  function defineArray() {\r\n\r\n    if(!animating) {\r\n      setDisplayAreaStyle({visibility: input == 0 ? \"hidden\" : \"visible\"})\r\n\r\n      // if(input != 0) {\r\n      //   setDisplayAreaStyle({visibility: \"visible\"})\r\n      // } else {\r\n      //   setDisplayAreaStyle({visibility: \"hidden\"})\r\n      // }\r\n\r\n      for(let i = 0; i < input; i++) {\r\n        // tempArray.push(Math.floor(Math.random() * window.innerHeight * 0.425))\r\n        tempArray.push(Math.floor(Math.random() * 100))\r\n      }\r\n\r\n      console.log('initial array', tempArray);\r\n\r\n      let loadArray = [...tempArray].map(num => {return {value: num, color: \"white\"}})\r\n      \r\n      setSortArray(loadArray);\r\n    }\r\n  }\r\n\r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n\r\n  function bubbleSort() {\r\n\r\n    setAnimating(true);\r\n\r\n    let tempArray = [...sortArray].map(i => i.value)\r\n\r\n    delay = 0;\r\n    let pass = 1\r\n\r\n    do {\r\n      swapped = false\r\n      \r\n      for(let i = 0; i < tempArray.length; i++) {\r\n\r\n        if(tempArray[i + 1] < tempArray[i]) {\r\n          \r\n          delay += (delayInc * aniSpeedConstants.bubble);\r\n          bubbleAnimate(i, delay, [...tempArray], pass)\r\n\r\n          let temp = tempArray[i];\r\n          tempArray[i] = tempArray[i+1];\r\n          tempArray[i+1] = temp\r\n\r\n          swapped = true;          \r\n\r\n        }\r\n      }\r\n\r\n      pass += 1\r\n\r\n      if (swapped === false) {\r\n        bubbleAnimate(0, delay, [...tempArray], \"swapped\")\r\n      }\r\n\r\n    } while (swapped === true)\r\n\r\n    setTimeout(() => {\r\n      console.log('delay bubble', delay);\r\n      setAnimating(false);\r\n    }, delay)\r\n\r\n  }\r\n\r\n  function bubbleAnimate(idx, delay, animateArray, pass) {   \r\n\r\n    setTimeout(() => {\r\n\r\n      if(pass === \"swapped\") {\r\n        let loadArray = [...animateArray].map((num, index) => {return {value: num, color: \"green\"}});\r\n        setSortArray(loadArray);\r\n        return\r\n      }\r\n\r\n\r\n      let temp = animateArray[idx];\r\n      animateArray[idx] = animateArray[idx+1];\r\n      animateArray[idx+1] = temp;\r\n\r\n      \r\n      let loadArray = [...animateArray].map((num, index) => {return {value: num, color: (index > (animateArray.length - pass)) ? \"green\" : \"white\"}})\r\n\r\n      // console.log('bubble pre display', loadArray, pass)\r\n\r\n      setSortArray(loadArray);\r\n\r\n      // ReactDOM.render(<DisplayArea array={sortArray} total={input}/>, document.getElementById('displayArea'))\r\n\r\n\r\n    }, delay)\r\n\r\n  }\r\n\r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n\r\n  function preQuickSort() {\r\n\r\n    setAnimating(true);\r\n\r\n    let arr = [...sortArray].map(i => i.value)\r\n    let sorted = []\r\n    // console.log('initial array', arr)\r\n    delay = 0;\r\n    quickSort(arr, 0, arr.length - 1, sorted);\r\n\r\n    setTimeout(() => {\r\n      console.log('delay bubble', delay);\r\n      setAnimating(false);\r\n    }, delay)\r\n\r\n    // setSortArray(arr);\r\n  }\r\n\r\n  function quickSort(arr, leftIdx, rightIdx, sorted) {\r\n\r\n    if(leftIdx < rightIdx) {\r\n      let pivotIdx = quickSortPartition(arr, leftIdx, rightIdx, sorted) //determine a pivot and partition array into left and right sections\r\n\r\n      console.log('array post partition', arr, 'new pivot', pivotIdx, 'left index', leftIdx, 'right index', rightIdx)\r\n      quickSort(arr, leftIdx, pivotIdx - 1, sorted) //recursive left part\r\n      quickSort(arr, pivotIdx + 1, rightIdx, sorted) //recursive right part\r\n    } else {\r\n      sorted.push(leftIdx, rightIdx);\r\n      quickSortAnimate([...arr], 0, 0, 'swap', [...sorted])\r\n      console.log(sorted)\r\n    }\r\n\r\n  }\r\n\r\n  function quickSortPartition(arr, leftIdx, rightIdx, sorted) {\r\n\r\n    // delay += 20\r\n\r\n    console.log('arr', arr, 'leftidx', leftIdx, 'rightidx', rightIdx)\r\n\r\n\r\n    let pivotVal = arr[rightIdx], //234, 142\r\n    l = leftIdx,\r\n    r = rightIdx\r\n\r\n    console.log(pivotVal, l, r)\r\n\r\n\r\n    while(l < r) { //0, 1  1, 63   l = 1\r\n      while(arr[l] < pivotVal) {\r\n        quickSortAnimate([...arr], l, rightIdx, 'compare', [...sorted]);\r\n        l++ //set l to first item from left larger than pivot value\r\n      }\r\n      while(arr[r] >= pivotVal && r != leftIdx) {\r\n        quickSortAnimate([...arr], r, rightIdx, 'compare', [...sorted]);\r\n        r-- //set r to first item from right smaller than pivot value\r\n      }\r\n      if(l < r) {\r\n        quickSortSwap(arr, l, r, sorted);\r\n        l = leftIdx;\r\n        r = rightIdx\r\n      }\r\n    }\r\n    quickSortSwap(arr, l, rightIdx, sorted)\r\n\r\n    sorted.push(l)\r\n    console.log('sorted nums', sorted);\r\n\r\n    return l\r\n  }\r\n\r\n  function quickSortSwap(arr, i, j, sorted) {\r\n    let temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n\r\n    quickSortAnimate([...arr], 0, 0, 'swap', [...sorted])\r\n\r\n  }\r\n  \r\n  function quickSortAnimate(arr, i, j, type, sorted) {\r\n\r\n    setTimeout(() => {\r\n\r\n\r\n      if(type === 'compare') {\r\n\r\n        let tempArray = [...arr].map((num, index) => {return {value: num, color: index === i || index === j ? \"red\" : sorted.indexOf(index) >= 0 ? \"green\" : \"white\" }})\r\n        setSortArray(tempArray)\r\n      } else if(type === 'swap') {\r\n\r\n        let tempArray = [...arr].map((num, index) => {return {value: num, color: sorted.indexOf(index) >= 0 ? \"green\" : \"white\"}})\r\n        setSortArray(tempArray)\r\n      }\r\n    }, delay += (delayInc * aniSpeedConstants.quick))\r\n  }\r\n\r\n\r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n//INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT INSERTION SORT \r\n\r\nfunction insertionSort() {\r\n\r\nsetAnimating(true);\r\n\r\n  delay = 0;\r\n  let tempArray = [...sortArray].map(i => i.value);\r\n\r\n  console.log('pre-insertion sort array', tempArray);\r\n\r\n  for(let i = 1; i < tempArray.length; i++) {\r\n\r\n    let compareIdx = i\r\n\r\n    while((tempArray[compareIdx] < tempArray[compareIdx-1]) && compareIdx !== 0) {\r\n\r\n      delay += (delayInc * aniSpeedConstants.insertion);\r\n      insertionSortAnimate([...tempArray], compareIdx, i);\r\n\r\n      let temp = tempArray[compareIdx - 1];\r\n      tempArray[compareIdx - 1] = tempArray[compareIdx];\r\n      tempArray[compareIdx] = temp;\r\n\r\n      compareIdx -= 1\r\n    }\r\n    // insertionSortAnimate([...tempArray], i, i)\r\n  }\r\n\r\n  setTimeout(() => {\r\n    let loadArray = [...tempArray].map((num, index) => {return {value: num, color: \"green\"}});\r\n    setSortArray(loadArray);\r\n    setAnimating(false);\r\n  }, delay);\r\n}\r\n\r\nfunction insertionSortAnimate(arr, current, sorted) {\r\n\r\n  setTimeout(() => {\r\n    let loadArray = [...arr].map((num, index) => {return {value: num, color: index === current ? \"red\" : index <= sorted ? \"green\" : \"white\"}});\r\n    setSortArray(loadArray);\r\n  }, delay);\r\n\r\n}\r\n\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n    <div className=\"section is-large sectionMain\">\r\n\r\n      <div className=\"reflections\" style={reflectionsStyle}><Reflections click={setReflectionsStyle}/></div>\r\n\r\n      <div className=\"columns columnContainer\">\r\n        <div className=\"column\"></div>\r\n          <div className=\"column is-four-fifths is-centered has-text-centered mainColumn\">\r\n\r\n            <div className=\"box is-info is-light reflectionsButton \" onClick={()=>{setReflectionsStyle({visibility: \"visible\"})}}>\r\n              Please <b>CLICK HERE</b> to view a log of my project learning updates and reflections :)\r\n              <br/>\r\n              This sorting visualiser project is still a work in progress, especially on mobile             \r\n            </div>\r\n            \r\n            <span className=\"tag is-info is-light is-large margin1 int\">Left slider = array size, right slider = visualise speed</span>\r\n            <input className=\"margin1 sliderInput\" type=\"range\" min={defaultBarCount.min} max={defaultBarCount.max} defaultValue={defaultBarCount.default} id=\"barCountInput\" onChange={inputChange}/> {/*User defined array size*/}\r\n            <input className=\"sliderInput\" type=\"range\" min={defaultDelay.min} max={defaultDelay.max} defaultValue={defaultDelay.max} id=\"delayInput\" onChange={inputChange}/> {/*User defined array size*/}\r\n            <button className=\"margin1 button is-info is-light is-normal is-rounded\" onClick={defineArray}>CREATE ARRAY</button>\r\n\r\n            \r\n\r\n          </div>\r\n        <div className=\"column\"></div>\r\n      </div>\r\n\r\n      <div className=\"alignBottom container\">\r\n\r\n              <div id=\"displayArea\" style={displayAreaStyle}></div>\r\n              <button onClick={bubbleSort}>Bubble Sort</button>\r\n              <button onClick={preQuickSort}>Quick Sort</button>\r\n              <button onClick={insertionSort}>Insertion Sort</button>\r\n\r\n            </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}