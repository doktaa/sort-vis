{"version":3,"sources":["logo.svg","components/BarContainer.js","components/DisplayArea.js","images/xbutton.svg","components/Reflections.js","App.js","reportWebVitals.js","index.js"],"names":["BarContainer","props","barContainerStyle","width","total","barStyle","height","num","backgroundColor","color","className","style","DisplayArea","totalBars","array","map","value","Reflections","src","xbutton","onClick","click","visibility","App","swapped","delay","useState","input","setInput","sortArray","setSortArray","displayAreaStyle","setDisplayAreaStyle","reflectionsStyle","setReflectionsStyle","tempArray","bubbleAnimate","idx","animateArray","pass","setTimeout","temp","loadArray","index","length","console","log","quickSort","arr","leftIdx","rightIdx","sorted","pivotIdx","pivotVal","l","r","quickSortAnimate","quickSortSwap","push","quickSortPartition","i","j","type","indexOf","useEffect","ReactDOM","render","document","getElementById","id","onChange","e","target","Math","floor","random","window","innerHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"yMAAe,I,YCqBAA,EArBM,SAACC,GAElB,IAAMC,EAAoB,CACtBC,MAAM,GAAD,OAAK,IAAIF,EAAMG,MAAf,MAIHC,EAAW,CACbC,OAAO,GAAD,OAAKL,EAAMM,IAAX,MACNC,gBAAiBP,EAAMQ,OAG3B,OACI,sBAAKC,UAAU,eAAeC,MAAOT,EAArC,UACI,qBAAKQ,UAAU,MAAMC,MAAON,IADhC,QCQOO,EAlBK,SAACX,GAEjB,IAAIY,EAAYZ,EAAMG,MAEtB,OACI,qBAAKM,UAAU,iBAAf,SACKT,EAAMa,MAAMC,KAAI,SAAAR,GACb,OAAO,cAAC,EAAD,CAAcA,IAAKA,EAAIS,MAAOZ,MAAOS,EAAWJ,MAAOF,EAAIE,cCVnE,MAA0B,oCCyF1BQ,EAvFK,SAAChB,GAOjB,OACI,sBAAKS,UAAU,uBAAf,UACI,qBAAKA,UAAU,UAAUQ,IAAKC,EAASC,QAAS,WAAKnB,EAAMoB,MAAM,CAACC,WAAY,cAC9E,2CAEI,uBAFJ,oFAII,uBAJJ,6GAMI,uBAAK,uBANT,cAQI,uBARJ,oFAUI,uBAVJ,sGAYI,uBAZJ,0EAcI,uBAAK,uBAdT,aAiBI,uBAjBJ,kHAmBI,uBAnBJ,sGAqBI,uBArBJ,6GAuBI,uBAvBJ,2MAyBI,uBAzBJ,uDA2BI,uBAAK,uBA3BT,aA6BI,uBA7BJ,mOA+BI,uBAAK,uBA/BT,aAiCI,uBAjCJ,wOAmCI,uBAnCJ,kGAqCI,uBArCJ,0HAuCI,uBAvCJ,+IAyCI,uBAzCJ,6BA2CI,uBAAK,uBA3CT,aA6CI,uBA7CJ,yNA+CI,uBA/CJ,qKAiDI,uBAAK,uBAjDT,aAmDI,uBAnDJ,6KAqDI,uBArDJ,gDAuDI,uBAAK,uBAvDT,aAyDI,uBAzDJ,iMA2DI,uBA3DJ,mMA6DI,uBA7DJ,oNA+DI,uBAAK,uBA/DT,aAiEI,uBAjEJ,uKAmEI,uBAnEJ,wUAsEI,uBAtEJ,qG,OCiQGC,MAnQf,WAAgB,IAQVC,EACAC,EATS,EAGaC,mBAAS,GAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIqBF,mBAAS,IAJ9B,mBAING,EAJM,KAIKC,EAJL,OAKmCJ,mBAAU,CAACJ,WAAY,WAL1D,mBAKNS,EALM,KAKYC,EALZ,OAMmCN,mBAAU,CAACJ,WAAY,WAN1D,mBAMNW,EANM,KAMYC,EANZ,KAOTC,EAAY,GA8EhB,SAASC,EAAcC,EAAKZ,EAAOa,EAAcC,GAE/CC,YAAW,WAET,GAAY,YAATD,EAAH,CAOA,IAAIE,EAAOH,EAAaD,GACxBC,EAAaD,GAAOC,EAAaD,EAAI,GACrCC,EAAaD,EAAI,GAAKI,EAGtB,IAAIC,EAAY,YAAIJ,GAAcvB,KAAI,SAACR,EAAKoC,GAAW,MAAO,CAAC3B,MAAOT,EAAKE,MAAQkC,EAASL,EAAaM,OAASL,EAAS,QAAU,YAErIM,QAAQC,IAAI,qBAAsBJ,EAAWH,GAE7CT,EAAaY,OAhBb,CACE,IAAIA,EAAY,YAAIJ,GAAcvB,KAAI,SAACR,EAAKoC,GAAW,MAAO,CAAC3B,MAAOT,EAAKE,MAAO,YAClFqB,EAAaY,MAmBdjB,GAoBL,SAASsB,EAAUC,EAAKC,EAASC,EAAUC,GAEzC,GAAGF,EAAUC,EAAU,CACrB,IAAIE,EAaR,SAA4BJ,EAAKC,EAASC,EAAUC,GAIlDN,QAAQC,IAAI,MAAOE,EAAK,UAAWC,EAAS,WAAYC,GAGxD,IAAIG,EAAWL,EAAIE,GACnBI,EAAIL,EACJM,EAAIL,EAEJL,QAAQC,IAAIO,EAAUC,EAAGC,GAGzB,KAAMD,EAAIC,GAAG,CACX,KAAMP,EAAIM,GAAKD,GACbG,EAAiB,YAAIR,GAAMM,EAAGJ,EAAU,UAAxB,YAAuCC,IACvDG,IAEF,KAAMN,EAAIO,IAAMF,GAAYE,GAAKN,GAC/BO,EAAiB,YAAIR,GAAMO,EAAGL,EAAU,UAAxB,YAAuCC,IACvDI,IAECD,EAAIC,IACLE,EAAcT,EAAKM,EAAGC,EAAGJ,GACzBG,EAAIL,EACJM,EAAIL,GAQR,OALAO,EAAcT,EAAKM,EAAGJ,EAAUC,GAEhCA,EAAOO,KAAKJ,GACZT,QAAQC,IAAI,cAAeK,GAEpBG,EA/CUK,CAAmBX,EAAKC,EAASC,EAAUC,GAE1DN,QAAQC,IAAI,uBAAwBE,EAAK,YAAaI,EAAU,aAAcH,EAAS,cAAeC,GACtGH,EAAUC,EAAKC,EAASG,EAAW,EAAGD,GACtCJ,EAAUC,EAAKI,EAAW,EAAGF,EAAUC,QAEvCA,EAAOO,KAAKT,EAASC,GACrBM,EAAiB,YAAIR,GAAM,EAAG,EAAG,OAAjB,YAA6BG,IAC7CN,QAAQC,IAAIK,GA0ChB,SAASM,EAAcT,EAAKY,EAAGC,EAAGV,GAChC,IAAIV,EAAOO,EAAIY,GACfZ,EAAIY,GAAKZ,EAAIa,GACbb,EAAIa,GAAKpB,EAETe,EAAiB,YAAIR,GAAM,EAAG,EAAG,OAAjB,YAA6BG,IAI/C,SAASK,EAAiBR,EAAKY,EAAGC,EAAGC,EAAMX,GAEzCX,YAAW,WAGT,GAAY,YAATsB,EAAoB,CAErB,IAAI3B,EAAY,YAAIa,GAAKjC,KAAI,SAACR,EAAKoC,GAAW,MAAO,CAAC3B,MAAOT,EAAKE,MAAOkC,IAAUiB,GAAKjB,IAAUkB,EAAI,MAAQV,EAAOY,QAAQpB,IAAU,EAAI,QAAU,YACrJb,EAAaK,QACR,GAAY,SAAT2B,EAAiB,CAEzB,IAAI3B,EAAY,YAAIa,GAAKjC,KAAI,SAACR,EAAKoC,GAAW,MAAO,CAAC3B,MAAOT,EAAKE,MAAO0C,EAAOY,QAAQpB,IAAU,EAAI,QAAU,YAChHb,EAAaK,MAEdV,GAAS,GAGd,OAtMAuC,qBAAU,WACRC,IAASC,OAAO,cAAC,EAAD,CAAapD,MAAOe,EAAWzB,MAAOuB,IAAUwC,SAASC,eAAe,kBACvF,CAACvC,IAqNF,cAhBA,CAgBA,OAAKnB,UAAU,+BAAf,UAEE,qBAAKA,UAAU,cAAcC,MAAOsB,EAApC,SAAsD,cAAC,EAAD,CAAaZ,MAAOa,MAE1E,sBAAKxB,UAAU,0BAAf,UACE,qBAAKA,UAAU,WACf,sBAAKA,UAAU,iEAAf,UAEE,yBAAQA,UAAU,6CAA6CU,QAAS,WAAKc,EAAoB,CAACZ,WAAY,aAA9G,oBACS,2CADT,mEAEE,uBAFF,kEAMA,sBAAMZ,UAAU,wCAAhB,sCACA,uBAAOA,UAAU,mCAAmCoD,KAAK,SAASO,GAAG,gBAAgBC,SAlO7F,SAAqBC,GACnB3C,EAAS2C,EAAEC,OAAOxD,MAAQ,IAAM,IAAMuD,EAAEC,OAAOxD,UAkOzC,wBAAQN,UAAU,uDAAuDU,QA/NjF,WAEEY,EAAoB,CAACV,WAAsB,IAAVK,EAAc,UAAY,WAQ3D,IAAI,IAAIiC,EAAI,EAAGA,EAAIjC,EAAOiC,IACxBzB,EAAUuB,KAAKe,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,YAAc,KAGjEhC,QAAQC,IAAI,gBAAiBX,GAE7B,IAAIO,EAAY,UAAIP,GAAWpB,KAAI,SAAAR,GAAQ,MAAO,CAACS,MAAOT,EAAKE,MAAO,YAEtEqB,EAAaY,IA6MP,0BAEA,sBAAKhC,UAAU,cAAf,UAEE,qBAAK2D,GAAG,cAAc1D,MAAOoB,IAC7B,wBAAQX,QAzMlB,WAEE,IAAIe,EAAY,YAAIN,GAAWd,KAAI,SAAA6C,GAAC,OAAIA,EAAE5C,SAE1CS,EAAQ,EACR,IAAIc,EAAO,EAEX,EAAG,CACDf,GAAU,EAMV,IAAI,IAAIoC,EAAI,EAAGA,EAAIzB,EAAUS,OAAQgB,IAEnC,GAAGzB,EAAUyB,EAAI,GAAKzB,EAAUyB,GAAI,CAGlCxB,EAAcwB,EADdnC,GAAS,GACI,YAAeU,GAAYI,GAExC,IAAIE,EAAON,EAAUyB,GACrBzB,EAAUyB,GAAKzB,EAAUyB,EAAE,GAC3BzB,EAAUyB,EAAE,GAAKnB,EAEjBjB,GAAU,EAKde,GAAQ,GAEQ,IAAZf,GACFY,EAAc,EAAGX,EAAJ,YAAeU,GAAY,kBAGvB,IAAZX,IAqKD,yBACA,wBAAQJ,QAhIlB,WACE,IAAI4B,EAAM,YAAInB,GAAWd,KAAI,SAAA6C,GAAC,OAAIA,EAAE5C,SAGpCS,EAAQ,EACRsB,EAAUC,EAAK,EAAGA,EAAIJ,OAAS,EAHlB,KA8HL,8BAKJ,qBAAKlC,UAAU,kBC3PRoE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdd,IAASC,OACP,cAAC,IAAMqB,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BU,K","file":"static/js/main.9026c335.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const BarContainer = (props) => {\r\n\r\n    const barContainerStyle = {\r\n        width: `${100/props.total}%`\r\n        // width: `10%`\r\n    }\r\n\r\n    const barStyle = {\r\n        height: `${props.num}px`,\r\n        backgroundColor: props.color\r\n    }\r\n    \r\n    return (\r\n        <div className=\"barContainer\" style={barContainerStyle}>\r\n            <div className=\"bar\" style={barStyle}></div> {/*bar*/}\r\n\r\n            {/* <h2 className=\"barLabel\">{props.num}</h2> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarContainer","import '../App.css';\r\nimport BarContainer from './BarContainer.js'\r\n\r\nconst DisplayArea = (props) => {\r\n\r\n    let totalBars = props.total\r\n\r\n    return (\r\n        <div className=\"graphContainer\">\r\n            {props.array.map(num => {\r\n                return <BarContainer num={num.value} total={totalBars} color={num.color}/>\r\n            })}\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default DisplayArea","export default __webpack_public_path__ + \"static/media/xbutton.f939aa43.svg\";","import xbutton from '../images/xbutton.svg'\r\n\r\nconst Reflections = (props) => {\r\n\r\n    function why() {\r\n        props.click({visibility: \"hidden\"})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"reflectionsContainer\">\r\n            <img className=\"xbutton\" src={xbutton} onClick={()=>{props.click({visibility: \"hidden\"})}}/>\r\n            <p>\r\n                2021/02/26\r\n                <br/>\r\n                Learnt how to use useState hook thing to save state variables (saving user input)\r\n                <br/>\r\n                using props in components, in this case passing the array through to display in the display area component\r\n                <br/><br/>\r\n                2021//02/27\r\n                <br/>\r\n                Finding out random things about file structure and imports  (CSS files and stuff)\r\n                <br/>\r\n                State (context of constantly changing array while being sorted) is confusing, need to understand it\r\n                <br/>\r\n                Dealt with array not updating even though it was being sorted correctly\r\n                <br/><br/>\r\n\r\n                2021/02/28\r\n                <br/>\r\n                Learnt that javascript arrays are just references and in order to actually clone an array, have to use [...xyz]\r\n                <br/>\r\n                Managed to get sorter working but have to clarify why i had to use [...] syntax for a specific case\r\n                <br/>\r\n                Now that bubble sort is a success, will look at refining current solution before adding more sort methods.\r\n                <br/>\r\n                Changing functionality so that instead of sort button generating and sorting at the same time, split it up so that there's a button to generate an array based on user input, and a separate sort button\r\n                <br/>\r\n                Doing random aesthetic stuff with css here and there\r\n                <br/><br/>\r\n                2021/03/02\r\n                <br/>\r\n                Random playing around with a border on the display area, using a variable to determine whether the display area should show the border or not (if array size is 0 then border should not be visible because it shows by default)\r\n                <br/><br/>\r\n                2021/03/03\r\n                <br/>\r\n                Running into an issue where button does not seem to update react use states on first click, but only updates on 2nd+ clicks...this is causing the generate array button to fail to render/update the graph unless i click it twice...\r\n                <br/>\r\n                console log is telling me the usestate setter method for sortArray is not actually updating it.\r\n                <br/>\r\n                Research tells me that react hooks run asynchronously which would explain why it wasn't immediately updating the array.\r\n                <br/>\r\n                Used useffect() to resolve this issue so that react renders the array only after it changes (so wait till sortArray changes before updating)\r\n                <br/>\r\n                ternary operators are sick\r\n                <br/><br/>\r\n                2021/03/04\r\n                <br/>\r\n                Created the reflections bit so i can access logs on the app. While creating this, used a hook for visibility of the reflections overlay, which involved passing the hook function as a prop to the Reflections object.\r\n                <br/>\r\n                Learnt that when doing so, have to use the passed in hook function (props) within arrow function in the onClick instead of calling the props directly from onClick\r\n                <br/><br/>\r\n                2021/03/06\r\n                <br/>\r\n                Implementing quicksort algorithm without looking up code for extra challenge, not sure if I should've jumped the gun going from bubble sort to quicksort just like that...\r\n                <br/>\r\n                Quicksort implemented, now need to animate it\r\n                <br/><br/>\r\n                2021/03/08\r\n                <br/>\r\n                figuring out how to animate quicksort, implemented animation changes every time a sort happens but i realised this is not that great since it doesn't represent the recursiveness of quicksort\r\n                <br/>\r\n                in order for quick sort to make sense, i need to start changing bar colours while animating so that i can see comparisons etc, this would make it useful in general for every sorting algorithm.\r\n                <br/>\r\n                To achieve this, modified array from numerical array to array that holds objects, which then contains the numerical value along with a colour value. Means i had to use .map a lot more whenever it was necessary\r\n                <br/><br/>\r\n                2021/03/09\r\n                <br/>\r\n                Made a sensible modification to the animation of Bubble Sort to indicate sorted bars as green, budget \"hard-codey\" solution but will modify to a better one later on\r\n                <br/>\r\n                Animating quicksort was aids, wanted to indicate sorted bars as green so turned the array from a numerical array into an array containing objects with a number and color that was passed through the whole\r\n                quicksort process but found out that OBJECTS WITHIN ARRAYS ACT AS REFERENCES AND THUS CANNOT BE CLONED IN A SHALLOW COPY.\r\n                <br/>\r\n                Modified to using a separate array to just store sorted bar indexes :( much boring such zzz         \r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reflections","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SortButton from './components/SortButton.js';\r\nimport DisplayArea from './components/DisplayArea.js';\r\nimport Reflections from './components/Reflections.js';\r\nimport { findAllByDisplayValue } from '@testing-library/react';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  const [input, setInput] = useState(0);\r\n  const [sortArray, setSortArray] = useState([]);\r\n  const [displayAreaStyle, setDisplayAreaStyle] = useState ({visibility: \"hidden\"});\r\n  const [reflectionsStyle, setReflectionsStyle] = useState ({visibility: \"hidden\"});\r\n  let tempArray = [];\r\n  let swapped;\r\n  let delay;\r\n\r\n  useEffect(() => {\r\n    ReactDOM.render(<DisplayArea array={sortArray} total={input}/>, document.getElementById('displayArea'))\r\n  }, [sortArray])\r\n\r\n  function inputChange(e) {\r\n    setInput(e.target.value > 500 ? 500 : e.target.value)\r\n  }\r\n\r\n  function defineArray() {\r\n\r\n    setDisplayAreaStyle({visibility: input !== 0 ? \"visible\" : \"hidden\"})\r\n\r\n    // if(input != 0) {\r\n    //   setDisplayAreaStyle({visibility: \"visible\"})\r\n    // } else {\r\n    //   setDisplayAreaStyle({visibility: \"hidden\"})\r\n    // }\r\n\r\n    for(let i = 0; i < input; i++) {\r\n      tempArray.push(Math.floor(Math.random() * window.innerHeight * 0.4))\r\n    }\r\n\r\n    console.log('initial array', tempArray);\r\n\r\n    let loadArray = [...tempArray].map(num => {return {value: num, color: \"white\"}})\r\n    \r\n    setSortArray(loadArray);\r\n  }\r\n\r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n//BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT BUBBLESORT \r\n\r\n  function bubbleSort() {\r\n\r\n    let tempArray = [...sortArray].map(i => i.value)\r\n\r\n    delay = 0;\r\n    let pass = 1\r\n\r\n    do {\r\n      swapped = false\r\n\r\n      \r\n\r\n      \r\n\r\n      for(let i = 0; i < tempArray.length; i++) {\r\n\r\n        if(tempArray[i + 1] < tempArray[i]) {\r\n          \r\n          delay += 20\r\n          bubbleAnimate(i, delay, [...tempArray], pass)\r\n\r\n          let temp = tempArray[i];\r\n          tempArray[i] = tempArray[i+1];\r\n          tempArray[i+1] = temp\r\n\r\n          swapped = true;          \r\n\r\n        }\r\n      }\r\n\r\n      pass += 1\r\n\r\n      if (swapped === false) {\r\n        bubbleAnimate(0, delay, [...tempArray], \"swapped\")\r\n      }\r\n\r\n    } while (swapped === true)\r\n  }\r\n\r\n  function bubbleAnimate(idx, delay, animateArray, pass) {   \r\n\r\n    setTimeout(() => {\r\n\r\n      if(pass === \"swapped\") {\r\n        let loadArray = [...animateArray].map((num, index) => {return {value: num, color: \"green\"}});\r\n        setSortArray(loadArray);\r\n        return\r\n      }\r\n\r\n\r\n      let temp = animateArray[idx];\r\n      animateArray[idx] = animateArray[idx+1];\r\n      animateArray[idx+1] = temp;\r\n\r\n      \r\n      let loadArray = [...animateArray].map((num, index) => {return {value: num, color: (index > (animateArray.length - pass)) ? \"green\" : \"white\"}})\r\n\r\n      console.log('bubble pre display', loadArray, pass)\r\n\r\n      setSortArray(loadArray);\r\n\r\n      // ReactDOM.render(<DisplayArea array={sortArray} total={input}/>, document.getElementById('displayArea'))\r\n\r\n\r\n    }, delay)\r\n\r\n  }\r\n\r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n//QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT QUICKSORT \r\n\r\n  function preQuickSort() {\r\n    let arr = [...sortArray].map(i => i.value)\r\n    let sorted = []\r\n    // console.log('initial array', arr)\r\n    delay = 0;\r\n    quickSort(arr, 0, arr.length - 1, sorted)    \r\n\r\n    // setSortArray(arr);\r\n  }\r\n\r\n  function quickSort(arr, leftIdx, rightIdx, sorted) {\r\n\r\n    if(leftIdx < rightIdx) {\r\n      let pivotIdx = quickSortPartition(arr, leftIdx, rightIdx, sorted) //determine a pivot and partition array into left and right sections\r\n\r\n      console.log('array post partition', arr, 'new pivot', pivotIdx, 'left index', leftIdx, 'right index', rightIdx)\r\n      quickSort(arr, leftIdx, pivotIdx - 1, sorted) //recursive left part\r\n      quickSort(arr, pivotIdx + 1, rightIdx, sorted) //recursive right part\r\n    } else {\r\n      sorted.push(leftIdx, rightIdx);\r\n      quickSortAnimate([...arr], 0, 0, 'swap', [...sorted])\r\n      console.log(sorted)\r\n    }\r\n\r\n  }\r\n\r\n  function quickSortPartition(arr, leftIdx, rightIdx, sorted) {\r\n\r\n    // delay += 20\r\n\r\n    console.log('arr', arr, 'leftidx', leftIdx, 'rightidx', rightIdx)\r\n\r\n\r\n    let pivotVal = arr[rightIdx], //234, 142\r\n    l = leftIdx,\r\n    r = rightIdx\r\n\r\n    console.log(pivotVal, l, r)\r\n\r\n\r\n    while(l < r) { //0, 1  1, 63   l = 1\r\n      while(arr[l] < pivotVal) {\r\n        quickSortAnimate([...arr], l, rightIdx, 'compare', [...sorted]);\r\n        l++ //set l to first item from left larger than pivot value\r\n      }\r\n      while(arr[r] >= pivotVal && r != leftIdx) {\r\n        quickSortAnimate([...arr], r, rightIdx, 'compare', [...sorted]);\r\n        r-- //set r to first item from right smaller than pivot value\r\n      }\r\n      if(l < r) {\r\n        quickSortSwap(arr, l, r, sorted);\r\n        l = leftIdx;\r\n        r = rightIdx\r\n      }\r\n    }\r\n    quickSortSwap(arr, l, rightIdx, sorted)\r\n\r\n    sorted.push(l)\r\n    console.log('sorted nums', sorted);\r\n\r\n    return l\r\n  }\r\n\r\n  function quickSortSwap(arr, i, j, sorted) {\r\n    let temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n\r\n    quickSortAnimate([...arr], 0, 0, 'swap', [...sorted])\r\n\r\n  }\r\n  \r\n  function quickSortAnimate(arr, i, j, type, sorted) {\r\n\r\n    setTimeout(() => {\r\n\r\n\r\n      if(type === 'compare') {\r\n\r\n        let tempArray = [...arr].map((num, index) => {return {value: num, color: index === i || index === j ? \"red\" : sorted.indexOf(index) >= 0 ? \"green\" : \"white\" }})\r\n        setSortArray(tempArray)\r\n      } else if(type === 'swap') {\r\n\r\n        let tempArray = [...arr].map((num, index) => {return {value: num, color: sorted.indexOf(index) >= 0 ? \"green\" : \"white\"}})\r\n        setSortArray(tempArray)\r\n      }\r\n    }, delay += 5)\r\n  }\r\n\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n    <div className=\"section is-large sectionMain\">\r\n\r\n      <div className=\"reflections\" style={reflectionsStyle}><Reflections click={setReflectionsStyle}/></div>\r\n\r\n      <div className=\"columns columnContainer\">\r\n        <div className=\"column\"></div>\r\n        <div className=\"column is-four-fifths is-centered has-text-centered mainColumn\">\r\n\r\n          <button className=\"button is-info is-light reflectionsButton \" onClick={()=>{setReflectionsStyle({visibility: \"visible\"})}}>\r\n            Please <b>CLICK HERE</b> to view a log of my project learning updates and reflections :)\r\n            <br/>\r\n            This sorting visualiser project is still a work in progress!             \r\n          </button>\r\n          \r\n          <span className=\"tag is-info is-light is-large margin1\">Please select array size</span>\r\n          <input className=\"input is-info is-rounded margin1\" type=\"number\" id=\"barCountInput\" onChange={inputChange}/>\r\n          <button className=\"margin1 button is-info is-light is-normal is-rounded\" onClick={defineArray}>CREATE ARRAY</button>\r\n\r\n          <div className=\"alignBottom\">\r\n\r\n            <div id=\"displayArea\" style={displayAreaStyle}></div>\r\n            <button onClick={bubbleSort}>Bubble Sort</button>\r\n            <button onClick={preQuickSort}>Quick Sort</button>\r\n\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"column\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}